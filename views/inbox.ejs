<%- include('./partials/header.ejs'); %>
    <div id="chat-container">
      <div id="search-container">
        <input type="text" placeholder="Search" />
      </div>
      <div id="conversation-list">
        <% data.forEach(function(conversation) { %>
          <% if(conversation.creator.id == loggedInUser.userId) { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>')">
              <span class="status" id="<%= conversation.participant.id %>-status"></span>
              <% if (conversation.participant.avatar) { %>
              <img src="./uploads/avatars/<%= conversation.participant.avatar %>" alt="<%= conversation.participant.name %>" />
              <% } else { %>
                <img src="./images/nophoto.png" />
              <% } %>
              <div class="title-text"><%= conversation.participant.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } else { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.name %>')">
              <span class="status" id="<%= conversation.creator.id %>-status"></span>
              <% if (conversation.creator.avatar) { %>
              <img src="./uploads/avatars/<%= conversation.creator.avatar %>" alt="<%= conversation.creator.name %>" />
              <% } else { %>
                <img src="./images/nophoto.png" />
              <% } %>
              <div class="title-text"><%= conversation.creator.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } %>
        <% }); %>
      </div>
      <div id="new-message-container" onclick="openModal()">
        <a href="#">+</a>
      </div>
      <div id="chat-title">
        <span id="conversation-partner"></span>
        <img src="./images/trash.png" alt="Delete Conversation" />
      </div>

      <div id="chat-message-list">
        <div class="nothing">select a conversation</div>
      </div>
      
      <form id="chat-form" method="post" enctype="multipart/form-data">
        
        <label for="attachment"><img src="./images/attachment.png" alt="Add Attachment" /></label>
        <input type="file" multiple name="attachment" class="hide" id="attachment" />
        <input type="text" name="message" placeholder="Type a message" autocomplete="off" />
      </form>
      
    </div>

    <%- include('./partials/addConversationModal.ejs') %>

    <script src="https://cdn.socket.io/4.6.0/socket.io.min.js"></script>

    <script>

      const form = document.querySelector('#chat-form');
      const messageContainer = document.querySelector('#chat-message-list');
      const chatTitleContainer = document.querySelector('#conversation-partner');
      let participant = null;
      let current_conversation_id;
      const loggedInUserId = '<%= loggedInUser.userId %>';
      const loggedInUserName = '<%= loggedInUser.username %>';

      // socket initialization
      const socket = io('<%= process.env.APP_URL %>', {
        auth: {
          userId: loggedInUserId
        }
      });

      // set online/offline status
      socket.on('getOnlineUser', data => {
        document.querySelectorAll('.status').forEach((item) => {
          item.classList.remove('online');
        })
        data.forEach(user => {
          const {userId} = user;
          document.getElementById(`${userId}-status`)?.classList.add('online');
        })
      })

      
      
      // fired new messages from server
      socket.on("new_message", data => {
        // only respond if current conversation is open in any client
        if(data.message.conversation_id == current_conversation_id){
          // message class
          const messageClass = data.message.sender.id == loggedInUserId ? 'you-message' : 'other-message';
          const senderAvatar = data.message.sender.avatar ? `<img src="./uploads/avatars/${data.message.sender.avatar}" alt="${data.message.sender.name}" />` : `<img src="./images/nophoto.png" alt="${data.message.sender.name}" />`;

          // message attachments
          let attachments = '<div class="attachments">';

          if(data.message.attachment && data.message.attachment.length > 0) {
            data.message.attachment.forEach(attachment => {
              attachments += `<img src="./uploads/attachments/${attachment}" /> `;
            });
          }

          attachments += '</div>';

          let messageHTML;

          // do not show avatar for loggedin user
          if(data.message.sender.id == loggedInUserId) {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          } else {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              ${senderAvatar}
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          }

          // append the inoming message to message area as last item
          document.querySelector('#chat-message-list > .message-row:first-child').insertAdjacentHTML('beforeBegin', messageHTML);
        }
      })
      
      // get messages of a conversation
      async function getMessages(conversation_id, current_conversation_name){

        // message failure toast
        const messagesFailureToast = Toastify({
          text: "Error loading messages!",
          duration: 1000,
        });
        
        let response = await fetch(`/inbox/messages/${conversation_id}`);
        const result = await response.json();
        
        if(!result.errors && result.data){
          form.style.visibility = 'visible';

          const {data, user, conversation_id} = result;
          participant = data.participant;
          current_conversation_id = conversation_id;
          
          if(data.messages){
            let allMessages = '';
            if(data.messages.length > 0){
              data.messages.forEach((message) => {
                let senderAvatar = message.sender.avatar ? `./uploads/avatars/${message.sender.avatar}` : './images/nophoto.png';
                const messageClass = message.sender._id === loggedInUserId ? 'you-message' : 'other-message';
                const showAvatar = message.sender._id === loggedInUserId ? '' : `<img src="${senderAvatar}" alt="${message.sender.name}" />`

                // message attachments
                let attachments = '<div class="attachments">';
                  if(message.attachment && message.attachment.length > 0){
                    message.attachment.forEach(attachment => {
                      attachments += `<a href="./uploads/attachments/${attachment}"><img src="./uploads/attachments/${attachment}" /></a>`;
                    })
                  }
                attachments += '</div>';

                // final message html
                let messageHTML = 
                `<div class="message-row ${messageClass} "> 
                  <div class="message-content">
                    ${showAvatar}
                    <div class="message-text">${message.text}</div> 
                    ${attachments}
                    <div class="message-time">${moment(message.data_time).fromNow()}</div>
                  </div>
                </div>`;
                
                allMessages += messageHTML;
                messageContainer.innerHTML = allMessages;
              });
            }else if(data.messages.length === 0){
              messageContainer.innerHTML = `<div class="message-row"></div>`;
            }
            chatTitleContainer.textContent = current_conversation_name;
          }
        }else{
          messagesFailureToast.showToast();
        }
      }
           

      // message sending
      form.onsubmit = async function(event){
        event.preventDefault();

        const sendMessageFailureToast = Toastify({
          text: 'Error sending message',
          duration: 1000,
        })

        const formData = new FormData(form);
        formData.append('receiverId', participant._id);
        formData.append('receiverName', participant.name);
        formData.append('avatar', participant.avatar || '');
        formData.append('conversationId', current_conversation_id);

        // sent the request to server
        let response = await fetch("/inbox/message", {
          method: "POST",
          body: formData
        });

        // get response
        const result = await response.json();

        if(!result.errors){
          form.reset();
        }else{
          sendMessageFailureToast.showToast();
        }

      }

    </script>
    
  </body>
</html>
